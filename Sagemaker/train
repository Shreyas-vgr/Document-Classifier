#!/usr/bin/env python

# A sample training component that trains a simple scikit-learn decision tree model.
# This implementation works in File mode and makes no assumptions about the input file names.
# Input is specified as CSV with a data point in each row and the labels in the first column.

from __future__ import print_function

import os
import json
import pickle
import sys
import traceback

import pandas as pd
import numpy as np

from sklearn import tree
from sklearn.model_selection import train_test_split
from sklearn.feature_extraction.text import CountVectorizer

from sklearn.feature_extraction.text import TfidfTransformer

#from sklearn.naive_bayes import MultinomialNB

from sklearn.linear_model import SGDClassifier
from sklearn.model_selection import GridSearchCV

from sklearn.pipeline import Pipeline

# These are the paths to where SageMaker mounts interesting things in your container.

prefix = '/opt/ml/'
input_path = prefix + 'input/data'
output_path = os.path.join(prefix, 'output')
model_path = os.path.join(prefix, 'model')
param_path = os.path.join(prefix, 'input/config/hyperparameters.json')

# This algorithm has a single channel of input data called 'training'. Since we run in
# File mode, the input files are copied to the directory specified here.
channel_name='training'
training_path = os.path.join(input_path, channel_name)

# The function to execute the training.
def train():
    print('Starting the training.')
    try:
        # Read in any hyperparameters that the user passed with the training job
        '''
        with open(param_path, 'r') as tc:
            trainingParams = json.load(tc)
        '''
        
        # Take the set of files and read them all into a single pandas dataframe
        input_files = [ os.path.join(training_path, file) for file in os.listdir(training_path) ]
        if len(input_files) == 0:
            raise ValueError(('There are no files in {}.\n' +
                              'This usually indicates that the channel ({}) was incorrectly specified,\n' +
                              'the data specification in S3 was incorrectly specified or the role specified\n' +
                              'does not have permission to access the data.').format(training_path, channel_name))
        raw_data = [ pd.read_csv(file, engine='python', header=None) for file in input_files ]
        train_data = pd.concat(raw_data)
    
    
        # labels are in the first column
    
        numpy_array = train_data.as_matrix()
        train_Y = numpy_array[:,0]
        train_X = numpy_array[:,1:]

        
        
        text_clf_svm = Pipeline([('vect', CountVectorizer()),
                      ('tfidf', TfidfTransformer()),
                      ('clf-svm', SGDClassifier(loss='hinge', penalty='l2',
                        alpha=1e-3, max_iter=5, random_state=42)),
                        ])

        parameters_svm = {'vect__ngram_range': [(1, 1), (1, 2), (1,3)],
                       'tfidf__use_idf': (True, False),
                       'clf-svm__alpha': (1e-2, 1e-3),
         }

        gs_clf_svm = GridSearchCV(text_clf_svm, parameters_svm, n_jobs=-1)
        gs_clf_svm = gs_clf_svm.fit(train_X.ravel().astype('U'),train_Y.astype('U'))

        #predicted  = gs_clf_svm.predict(train_X.ravel().astype('U'))
        #print(np.mean(predicted == train_Y))
        # save the model
        with open(os.path.join(model_path, 'document-classifier-model.pkl'), 'wb') as out:
            pickle.dump(gs_clf_svm, out)
            
        #joblib.dump(gs_clf_svm.best_estimator_, os.path.join(model_path, 'document-classifier-model.pkl'), compress = 1)
        print('Training complete.')
    except Exception as e:
        # Write out an error file. This will be returned as the failureReason in the
        # DescribeTrainingJob result.
        trc = traceback.format_exc()
        with open(os.path.join(output_path, 'failure'), 'w') as s:
            s.write('Exception during training: ' + str(e) + '\n' + trc)
        # Printing this causes the exception to be in the training job logs, as well.
        print('Exception during training: ' + str(e) + '\n' + trc, file=sys.stderr)
        # A non-zero exit code causes the training job to be marked as Failed.
        sys.exit(255)

if __name__ == '__main__':
    train()

    # A zero exit code causes the job to be marked a Succeeded.
    sys.exit(0)
